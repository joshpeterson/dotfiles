#!/bin/sh

print_usage() {
  echo "Usage: llvm {release|debug|update|clone} <optional ninja args>"
  echo "Required:"
  echo "\trelease - build the release configuration"
  echo "\tdebug - build the debug configuration"
  echo "\tupdate - pull the latest code from git"
  echo "\tclone - create a new clone in the llvm directory"
  echo "Optional:"
  echo "\t Additional arguments are passed to ninja"
  exit 1
}

if [ "$1" = "release" ]; then
  if [ ! -d "build" ]; then
    mkdir build
  fi

  cd build

  if [ ! -d "release" ]; then
    mkdir release
  fi

  cd release
  # Here is the cmake command to configure a release build.
  # Uncomment this line and run again to change the configuration.
  # cmake -GNinja -DCMAKE_BUILD_TYPE=Release ../../llvm

  if [ -n $2 ]; then
    ninja $2
  else
    ninja
  fi

  cd ../..
elif [ "$1" = "debug" ]; then
  if [ ! -d "build" ]; then
    mkdir build
  fi

  cd build

  if [ ! -d "debug" ]; then
    mkdir debug
  fi

  cd debug

  # Use the "console" pool, which has a depth of 1. Linking in debug
  # in parallel can exhaust all of the memory on the machine. The console
  # pool only allows one linker job at time, so we don't run out of memory.

  # Here is the cmake command to configure a debug build.
  # Uncomment this line and run again to change the configuration.
  # cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_JOB_POOL_LINK=console ../../llvm
  #ninja clang && ninja bugpoint && ninja

  if [ -n $2 ]; then
    ninja $2
  else
    ninja
  fi

  cd ../..
elif [ "$1" = "update" ]; then
  echo === Updating llvm ===
  cd llvm
  git pull
  echo === Updating clang ===
  cd tools/clang
  git pull
  echo === Updating compiler-rt ===
  cd ../../projects/compiler-rt
  git pull
  echo === Updating test-suite ===
  cd ../../projects/test-suite
  git pull
  cd ../../..
elif [ "$1" = "clone" ]; then
  echo === Cloning llvm ===
  git clone https://git.llvm.org/git/llvm.git/
  echo === Cloning clang ===
  cd llvm/tools
  git clone https://git.llvm.org/git/clang.git/
  cd ..
  echo === Cloning compiler-rt ===
  cd llvm/projects
  git clone https://git.llvm.org/git/compiler-rt.git/
  cd ..
  echo === Cloning test-suite ===
  cd llvm/projects
  git clone https://git.llvm.org/git/test-suite.git/
  cd ..
  git config branch.master.rebase true
else
  echo Invalid first argument: "$1"
  print_usage
fi


